generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Company {
  id        String   @id @default(cuid())
  name      String
  theme     String   @default("system")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users    User[]
  projects Project[]
  teams    Team[]
  roles    Role[]

  @@map("companies")
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  password          String
  firstName         String
  lastName          String
  isActive          Boolean   @default(true)
  mustChangePassword Boolean  @default(true)
  profileCompleted  Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  roleId String
  role   Role   @relation(fields: [roleId], references: [id])

  teamMembers    TeamMember[]
  timesheets     Timesheet[]
  createdProjects Project[] @relation("ProjectCreator")
  trainings      Training[]

  @@map("users")
}

model Role {
  id          String   @id @default(cuid())
  name        String
  description String?
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  users       User[]
  permissions RolePermission[]

  @@unique([companyId, name])
  @@map("roles")
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())

  rolePermissions RolePermission[]

  @@map("permissions")
}

model RolePermission {
  id String @id @default(cuid())

  roleId String
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  totalHours  Int?
  isPaid      Boolean  @default(false)
  amount      Decimal? @db.Decimal(10, 2)
  invoice     String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  createdById String
  createdBy   User   @relation("ProjectCreator", fields: [createdById], references: [id])

  teamProjects TeamProject[]
  timesheets   Timesheet[]

  @@map("projects")
}

model Team {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  members      TeamMember[]
  teamProjects TeamProject[]

  @@map("teams")
}

model TeamMember {
  id String @id @default(cuid())

  teamId String
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  joinedAt DateTime @default(now())

  @@unique([teamId, userId])
  @@map("team_members")
}

model TeamProject {
  id String @id @default(cuid())

  teamId String
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  assignedAt DateTime @default(now())

  @@unique([teamId, projectId])
  @@map("team_projects")
}

model Timesheet {
  id          String   @id @default(cuid())
  date        DateTime
  hours       Decimal  @db.Decimal(4, 2)
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId, date])
  @@map("timesheets")
}

model Training {
  id               String   @id @default(cuid())
  courseName       String
  courseLink       String?
  courseCategory   String
  organizationName String
  certificateTitle String
  level            String   // beginner, intermediate, advanced
  startDate        DateTime
  endDate          DateTime?
  expectedEndDate  DateTime?
  status           String   // started, in_progress, completed, others
  outcome          String   // certificate, demo, others
  notes            String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("trainings")
}
